---
# file: terraform_init_plan_apply.yml
- name: Terraform init/plan/apply (canonical commands)
  hosts: localhost
  gather_facts: false

  vars:
    # Where the TF code lives. You can point this to a Git repo or a local path.
    tf_source_repo: "https://github.com/taiseerhussein/terraform-files.git"   # or set to "" to skip cloning
    tf_source_version: "main"
    tf_workdir_parent: "/tmp/aap-tf-work"        # workspace root
    tf_subdir: "aws"                        # relative dir inside the repo with main.tf
    tf_workspace: "default"                       # terraform workspace to use/create

    # Option A: pass a var-file
    tf_var_file: "terraform.tfvars"               # leave "" to skip
    # Option B: inline variables (used if tf_var_file == "")
    aap_password: "{{ lookup('env', 'AAP_PASSWORD') }}"
    tf_vars: "-var aap_password={{ aap_password }}"

    # Optional backend config (written to backend.hcl if provided and used during init)
    s3_bucket: "terraform-taiseer"     # <-- change me
    s3_region: "us-east-2"                 # <-- change me
    s3_acl: "private"
    s3_storage_class: "STANDARD"
    s3_presign_expires: 86400   
    s3_prefix: "unreachable/error_report/job_123"

    tf_backend_hcl: {
      "bucket": "{{ s3_bucket }}",
      "key": "thussein/tfstatefile",
      "region": "{{ s3_region }}"
    }                            # e.g. {"bucket": "my-tf-state", "key": "prod/terraform.tfstate", "region": "us-east-1"}

    # Plan file name
    tf_plan_out: "tfplan"

    # Fail the play if "plan" has no changes? (false = still apply)
    fail_if_no_changes: false

  # Map your cloud creds in AAP Credentials â†’ Environment (example below uses AWS env vars)
  # Set these via AAP credential injection, NOT hard-coded.
  # For AWS:
  #   AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN (if using STS), AWS_DEFAULT_REGION
  # For Azure:
  #   ARM_CLIENT_ID, ARM_CLIENT_SECRET, ARM_TENANT_ID, ARM_SUBSCRIPTION_ID
  # For GCP:
  #   GOOGLE_APPLICATION_CREDENTIALS (path to JSON) or application-default creds in EE.

  tasks:
    - name: Ensure workspace root exists
      ansible.builtin.file:
        path: "{{ tf_workdir_parent }}"
        state: directory
        mode: "0755"

    - name: Clone Terraform repo (skip if local path is used)
      when: tf_source_repo | length > 0
      ansible.builtin.git:
        repo: "{{ tf_source_repo }}"
        dest: "{{ tf_workdir_parent }}/repo"
        version: "{{ tf_source_version }}"
        force: true

    - name: Set Terraform working directory
      ansible.builtin.set_fact:
        tf_workdir: >-
          {{ (tf_source_repo | length > 0)
              | ternary(tf_workdir_parent ~ '/repo/' ~ tf_subdir, tf_workdir_parent ~ '/' ~ tf_subdir) }}

    - name: Create TF dir if using local source path
      when: tf_source_repo | length == 0
      ansible.builtin.file:
        path: "{{ tf_workdir }}"
        state: directory
        mode: "0755"

    - name: Write backend.hcl (optional)
      when: tf_backend_hcl | length > 0
      ansible.builtin.copy:
        dest: "{{ tf_workdir }}/backend.hcl"
        mode: "0600"
        content: |
          {% for k, v in tf_backend_hcl.items() -%}
          {{ k }} = "{{ v }}"
          {% endfor %}

    - name: Terraform init
      ansible.builtin.command: >-
        terraform init
        -input=false
        {% if tf_backend_hcl | length > 0 %}-backend-config=backend.hcl{% endif %}
      args:
        chdir: "{{ tf_workdir }}"
      register: tf_init
      changed_when: "'Terraform has been successfully initialized!' in tf_init.stdout or 'Initializing the backend...' in tf_init.stdout"

    - name: Ensure workspace exists (list)
      ansible.builtin.command: terraform workspace list
      args:
        chdir: "{{ tf_workdir }}"
      register: tf_ws_list
      changed_when: false

    - name: Create workspace if missing
      ansible.builtin.command: terraform workspace new {{ tf_workspace }}
      args:
        chdir: "{{ tf_workdir }}"
      when: tf_workspace not in (tf_ws_list.stdout_lines | join(' '))
      register: tf_ws_new
      changed_when: "'Created and switched to workspace' in tf_ws_new.stdout"

    - name: Select workspace
      ansible.builtin.command: terraform workspace select {{ tf_workspace }}
      args:
        chdir: "{{ tf_workdir }}"
      register: tf_ws_select
      changed_when: false

    - name: Build -var args (if no var-file)
      ansible.builtin.set_fact:
        tf_var_args: >-
          {{ tf_vars | dict2items | map('regex_replace', '^(.*)$', '-var \\1') | list
             | map('regex_replace', '^(.*)$', '\\1') | join(' ') }}
      # when: tf_var_file | length == 0
    - name: Show Args
      ansible.builtin.debug:
        msg: "{{ tf_var_args }}"
    - name: Terraform plan (with var-file OR -var)
      ansible.builtin.command: terraform plan -input=false -out={{ tf_plan_out }} {{ tf_vars }} -var-file={{ tf_var_file }}
      args:
        chdir: "{{ tf_workdir }}"
      register: tf_plan
      changed_when: "'No changes. Infrastructure is up-to-date.' not in tf_plan.stdout"

    - name: Optionally fail if no changes in plan
      ansible.builtin.fail:
        msg: "Plan detected no changes; stopping as requested."
      when:
        - fail_if_no_changes
        - tf_plan.stdout is search('No changes. Infrastructure is up-to-date.')

    # - name: Terraform apply (auto-approve)
    #   ansible.builtin.command: >-
    #     terraform apply -input=false -auto-approve {{ tf_plan_out }}
    #   args:
    #     chdir: "{{ tf_workdir }}"
    #   register: tf_apply
    #   # Mark changed when apply actually performed something (handles repeated runs)
    #   changed_when: >
    #     ('Apply complete!' in tf_apply.stdout) or
    #     ('No changes. Infrastructure is up-to-date.' not in (tf_plan.stdout | default('')))

    - name: Terraform output (json)
      ansible.builtin.command: terraform output -json
      args:
        chdir: "{{ tf_workdir }}"
      register: tf_output
      changed_when: false
      failed_when: false

    - name: Save outputs to artifact
      ansible.builtin.copy:
        dest: "{{ tf_workdir_parent }}/terraform_outputs.json"
        content: "{{ tf_output.stdout | default('{}') }}"
        mode: "0644"

    # - name: Pause for 5 minutes to build app cache
    #   ansible.builtin.pause:
    #     minutes: 5

    - name: Upload reports to S3
    # Requires amazon.aws collection and AWS credential/role
      amazon.aws.s3_object:
        bucket: "{{ s3_bucket }}"
        region: "{{ s3_region }}"
        mode: put
        object: "{{ s3_prefix }}/{{ item | basename }}"
        src: "{{ item }}"
      loop:
        - "{{ tf_workdir_parent }}/terraform_outputs.json"
        - "{{ tf_workdir }}/{{ tf_plan_out }}"
        # - "{{ json_report_path }}"
        # - "{{ summary_path }}"
        # - "{{ msg_txt_file }}"
      register: _uploads
      delegate_to: localhost
      run_once: true
    - name: Show key outputs
      ansible.builtin.debug:
        msg:
          init_summary: "{{ tf_init.stdout | default('') | regex_search('Terraform has been successfully initialized!|Initializing the backend...', multiline=True) }}"
          workspace: "{{ tf_workspace }}"
          plan_changed: "{{ 'No changes.' not in tf_plan.stdout }}"
          # apply_tail: "{{ (tf_apply.stdout | default(''))[-500:] }}"
          outputs_file: "{{ tf_workdir_parent }}/terraform_outputs.json"
